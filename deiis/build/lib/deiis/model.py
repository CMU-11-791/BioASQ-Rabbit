"""
The data model for the JSON format used by BioASQ.
"""

import json


class Type:
    """
    Provides factory methods for generating default values that are missing
    from JSON input.
    """
    @staticmethod
    def text():
        return ''

    @staticmethod
    def number():
        return -1

    @staticmethod
    def none():
        return None


class JsonObject(object):
    """
    Base class for classes that will be serialized to JSON.

    The constructor will ensure that all required properties have been
    initialized properly.  Subclasses can provide a custom implementation of
    the __json_model__() method if they need to modify the JSON that is
    generated by the class.
    """
    def __init__(self, params):
        if not hasattr(self.__class__, 'properties'):
            raise AttributeError('Class is missing properties dictionary.')

        if params is None:
            self.set_defaults()
            return

        for key,value in params.iteritems():
            if not key in self.__class__.properties:
                raise AttributeError('Class %s does not have a property %s', self.__class__.__name__, key)
            setattr(self, key, value)
        self.check_properties()

    def set_defaults(self):
        """Sets all properties to their default values."""
        for name, constructor in self.__class__.properties.iteritems():
            setattr(self, name, constructor())

    def check_properties(self):
        """Ensures that all of the declared properties have a value define."""
        for name, constructor in self.__class__.properties.iteritems():
            if not hasattr(self, name):
                setattr(self, name, constructor())

    def __json_model__(self):
        """A method sub-classes can override to provide a custom model to
        be serialized to JSON."""
        return self.__dict__


class Triple(JsonObject):
    properties = {
        'p': Type.text,
        's': Type.text,
        'o': Type.text,
    }

    def __init__(self, params):
        super(Triple, self).__init__(params)


class Snippet(JsonObject):
    """
    Snippets consist of one or more sentences that are the candidate
    answers.
    """
    properties = {
        'text': Type.text,
        'beginSection': Type.text,
        'endSection': Type.text,
        'offsetInBeginSection': Type.number,
        'offsetInEndSection': Type.number,
        'document': Type.text,
        'sentences': list
    }

    def __init__(self, params):
        super(Snippet, self).__init__(params)
        if len(self.sentences) > 0:
            self.sentences = [ Sentence(s) for s in self.sentences ]


class Question(JsonObject):
    """A single question along with the snippets and exact and ideal answers."""
    properties = {
        'id': Type.text,
        'type': Type.text,
        'body': Type.text,
        'tokens': list,
        'documents': list,
        'concepts': list,
        'triples': list,
        'snippets': list,
        'ranked': list,
        'exact_answer': Type.text,
        'ideal_answer': Type.text
    }
    def __init__(self, params):
        super(Question, self).__init__(params)
        if len(self.triples) > 0:
            self.triples = [ Triple(t) for t in self.triples ]
        if len(self.snippets) > 0:
            self.snippets = [ Snippet(s) for s in self.snippets ]


class Sentence(JsonObject):
    """A single sentence with the list of tokens that make up the sentence."""
    properties = {
        'text': Type.text,
        'tokens': list
    }
    def __init__(self, params):
        if isinstance(params, dict):
            super(Sentence, self).__init__(params)
        else:
            self.text = params
            self.tokens = []


class DataSet(JsonObject):
    """
    The root class used to parse BioASQ data files.

        dataset = Serializer.parse(json_input, DataSet)
        for question in dataset.questions:
            print question.id + ': ' + question.body

    """
    properties = {
        'questions':list
    }
    def __init__(self, params=None):
        super(DataSet, self).__init__(params)
        if self.questions:
            self.questions = [Question(q) for q in self.questions ]


class Serializer:
    """
    Serializes classes to/from JSON.

    Always use the ``Serializer`` class to ensure that object as serialized
    consistently.  In particular the Serializer class uses a custom JSON
    encoded that checks each class to be serialized for a __json_model__
    method and calls that if present.
    """

    @staticmethod
    def get(o):
        if hasattr(o, '__json_model__'):
            return o.__json_model__()
        else:
            return json.JSONEncoder.default(o)

    @staticmethod
    def to_json(o):
        return json.dumps(o, default=Serializer.get, sort_keys=True)

    @staticmethod
    def to_pretty_json(o):
        return json.dumps(o, default=Serializer.get, sort_keys=True, indent=4)

    @staticmethod
    def parse(input, cls=None):
        if isinstance(input, file):
            map = json.load(input)
        else:
            map = json.loads(input)
        if cls is None:
            return map
        return cls(map)

